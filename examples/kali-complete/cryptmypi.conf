
#   Optional function: can be ommited.
stage1_optional_hooks(){
    myhooks "experimental-initramfs-wifi"
    myhooks "optional-initramfs-luksnuke"
    myhooks "optional-sys-gpugovernor-ondemand"
    myhooks "optional-sys-dns"
}

# DNS settings ----------------------------------------------------------------
#   Sets DNS servers to be used by the system
# Hooks
#   preconditions-dns
#   optional-sys-dns
#   experimental-initramfs-wifi
#   optional-sys-wifi

# Optional variable (default: "1.1.1.1")
#export _DNS1='1.1.1.1'

# Optional variable (default: "8.8.8.8")
#export _DNS2='8.8.8.8'

# WIFI settings ---------------------------------------------------------------
# Hooks
#   optional-initramfs-wifi
#       Attempts to set wifi up at initramfs to expose
#       dropbear's LUKS unlocking mechanism
#   optional-sys-wifi
#       Attempts to preconfigure system wifi.

## SSID the network name
#export _WIFI_SSID='SKYNET'

## Wifi network password
#export _WIFI_PASS='helloworld'

## Wifi
#export _WIFI_INTERFACE='wlan0'

## Kernel IP param
#     This parameter tells the kernel how to configure IP addresses of devices
#     and also how to set up the IP routing table. If this parameter is missing
#     from the kernel command line, all fields are assumed to be empty, and the
#     defaults mentioned below apply. In general this means that the kernel
#     tries to configure everything using autoconfiguration.
#
#            ip=<client-ip>:<server-ip>:<gw-ip>:<netmask>:
#                <hostname>:<device>:<autoconf>:<dns0-ip>:<dns1-ip>
#
#     For more info, check
#         https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
# Optional variable (default: ':::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}:')
#export _INITRAMFS_WIFI_IP=":::::${_INITRAMFS_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}"

## Modules to load at the initramfs, add your wifi firmware and drivers here
#     For reference, each Raspberry PI version's default wifi chipset:
#     - RPi4b+    brcmfmac43455
# Optional variable (default:'brcmfmac brcmutil cfg80211 rfkill')
#export _INITRAMFS_WIFI_DRIVERS='brcmfmac43455 brcmfmac brcmutil cfg80211 rfkill'


###############################################################################
## Stage-2 Settings ###########################################################

# Optional stage 2 hooks
#   If declared, this function is called during stage2 build by the
#   stage2-runoptional hook.
#
#   Optional function: can be ommited.
stage2_optional_hooks(){
    myhooks "optional-sys-rootpassword"
#    myhooks "optional-sys-wifi"
}


###############################################################################
##Optional Hook Settings #####################################################

# ROOT PASSWORD CHANGER settings ----------------------------------------------
# Hooks
#   optional-sys-rootpassword
#       Changes the system root password
## The new root password
export _ROOTPASSWD="toor"

# LUKSNUKE settings -----------------------------------------------------------
# Hooks
#   optional-initramfs-luksnuke
#       Sets LUKS nuke password. When used, nuke erases the encrypted headers.
export _LUKSNUKEPASSWD="luks_nuke_password"

# IODINE settings -------------------------------------------------------------
# Hooks
#   untested-optional-initramfs-iodine
#       Configures IODINE to allow DNS tunneling of dataat intrafs, so that
#       trafic is harder to be detected and firewalls can be bypassed.

## IODINE Domain
export _IODINE_DOMAIN=""

## IODINE Password
export _IODINE_PASSWORD=""

# OPENVPN settings ------------------------------------------------------------
# Hooks
#   optional-sys-openvpn
#       Attemps to configure the system to use an VPN (as a client)

## Zip file containing 'client.conf' and any other deps (creds, certs, etc)
# Optional variable (default: "openvpn.zip")
export _OPENVPN_CONFIG_ZIP="openvpn.zip"
