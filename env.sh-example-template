#!/bin/bash
set -eu

declare -xr _NEW_DEFAULT_USER="kali"; #
declare -xri _NO_PROMPTS=; #1 or 0, the script will not prompt and will copy to disk without asking if set to 1
declare -xr _LUKS_PASSWORD=; #the password for your encrypted volume
declare -xr _SSH_KEY_PASSPHRASE=; #the ssh passphrase for your ssh key
declare -xr _WIFI_PASSWORD=; #the password for the wifi
declare -xr _ROOT_PASSWORD=; #root password
declare -xr _USER_PASSWORD=; #kali user password
declare -xr _LUKS_NUKE_PASSWORD=;#the luks nuke password
declare -xr _DNS1=; #primary dns
declare -xr _DNS2=; #fallback dns
declare -xr _CPU_GOVERNOR=; #cpu frequency setting can be 'performance' or if running on battery 'ondemand'. 
declare -xr _IODINE_DOMAIN=; #iodine domain
declare -xr _IODINE_PASSWORD=; #iodine password
declare -xr _OPENVPN_CONFIG_ZIP=; #name of your zip file for openvpn, add the file to the files directory
declare -xr _HOSTNAME=; #your rpi's hostname
declare -xr _KERNEL_VERSION_FILTER=; #your rpi's kernel version i.e. 8, 8l, l etc look in /lib/modules
declare -xr _LOCALE=; #e.g. en_US.UTF-8
declare -xr _OUTPUT_BLOCK_DEVICE=; #where to write your build, e.g. /dev/sda, /dev/mmcblk0
declare -xr _FILESYSTEM_TYPE=; #btrfs, ext4 are currently supported
declare -xri _LOG_LEVEL=; #0 = debug messages and normal, 1 normal only
declare -xr _LUKS_CONFIGURATION=; #luks encryption configuration
declare -xr _PKGS_TO_INSTALL=; #a space seperated list of packages to install
declare -xr _PKGS_TO_PURGE=; #a space seperated list of packages to remove
declare -xr _IMAGE_SHA256=; #the hash for your rpi image.xz, leaving blank with skip hash checking
declare -xr _IMAGE_URL=; #the link to the rpi image.img.xz you want to use
declare -xr _SSH_LOCAL_KEYFILE="$_FILE_DIR/.ssh/id_rsa"; #path to your ssh keyfile
declare -xr _SSH_PASSWORD_AUTHENTICATION=;# can be 'yes' or 'no'
declare -xr _SSH_BLOCK_SIZE=;#suggest a larger blocksize such as 4096
declare -xr _SSH_PORT=;#port to open for ssh,sftp suggest a non-standard port (not 22). #SSH PORT used in dropbear setup, ufw setup optional scripts
declare -xr _WIFI_SSID=; #the ssid for your wifi hotspot/router
declare -xr _WIFI_INTERFACE=; #usually 'wlan0', your network interface
declare -xr _INITRAMFS_WIFI_IP=":::::${_WIFI_INTERFACE}:dhcp:${_DNS1}:${_DNS2}";

declare -xr _INITRAMFS_WIFI_DRIVERS='brcmfmac brcmutil cfg80211 rfkill'; #any custom drivers needed for initramfs wifi 
declare -xr _INITRAMFS_WIFI_INTERFACE='wlan0'
declare -xr _CHKBOOT_BOOTDISK=; #usually /dev/mmcblk0 for sd card installs or /dev/sda
declare -xr _CHKBOOT_BOOTPART=; #usually /dev/mmcblk0p1 for sd card installs or /dev/sda1
declare -xr _PASSWORDLESS_LOGIN_USER=; #kali or root, enables you to login to the gui without a password
declare -xr _SHELL=;#shell you want to use i.e. bash, zsh
declare -xri _IMAGE_MODE=1; #write to an image rather than directly to disk 1 or 0
declare -xr _SFTP_PASSWORD=;#ftp user
declare -xr _KEYBOARD_LAYOUT='gb'; #set keyboard layout

###############################################
#ALL THE OPTIONS:
#SOME MAY NOT WORK WITH OTHERS.
#FEEL FREE TO MODIFY THE METHODS WITH YOUR CUSTOM CONFIG

#this runs on your build machine
#uncomment to use the options
optional_setup(){
# firewall_setup; #sets up ufw firewall with sensible defaults
# headless_setup; #headless setup wrapper, configures dropbear,ssh,wifi,wifi initramfs and disables the display manager
# initramfs_wifi_setup; #enables connection to a wifi router/hotspot on boot
# wifi_setup; #sets up the wifi to connect to a hotspot/router on decrypt
chkboot_setup; #hashes your boot drive on startup and lets you know if it changes
# display_manager_setup; #disables the gui
# dropbear_setup; #sets up initramfs dropbear
# luks_nuke_setup; #sets up luks nuke
# ssh_setup; #sets up ssh
# cpu_governor_setup; #sets up the cpu 'governor'
# hostname_setup; #sets up the hostname
# root_password_setup; #sets root password
# user_password_setup; #sets kali user password
# vpn_client_setup; #sets up vpn client openvpn
# clamav_setup; #sets up antivirus scanning
# fake_hwclock_setup; #sets up fake hardware clock
# apt_upgrade; #apt upgrade
# docker_setup; #docker
# ntpsec_setup; #sets up secure ntp 
# iodine_setup; #sets up iodine
# vlc_setup; #sets up vlc and fixes audio stutter issue on rpi4
# sysctl_hardening_setup; #hardens your sysctl
# passwordless_login_setup; #enables passwordless login of the gui if using a gui
# default_shell_setup; #sets your shell to zsh
# bluetooth_setup; #sets up bluetooth (modify if you have some bluetooth devices you want to to work)
# apparmor_setup; #apparmor 
# random_mac_on_reboot_setup; #randomizes mac address on machine reboot
# firejail_setup; #sets up firejail
# vnc_setup; #sets up vnc
# sftp_setup; #sets up secure ftp
# avahi_setup; #mdns lets you find your device with $hostname.local instead of ip (not currently supported in android)
# packages_setup; #installs, removes packages
 mount_boot_readonly_setup; #mounts boot readonly on startup
# miscellaneous_setup; #other stuff - add yours in
# dns_setup; #sets up dns, dnssec, dnsovertls
# aide_setup; #configures aide intrusion detection
# snapper_setup; #installs snapper (config left to use)
# static_ip_setup; set static ip
}
